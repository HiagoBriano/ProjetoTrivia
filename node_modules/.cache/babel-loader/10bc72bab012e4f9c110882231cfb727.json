{"ast":null,"code":"var _jsxFileName = \"/home/brenotainan/projetos/ProjetoTrivia/src/components/Questions.js\";\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getToken, playerAssertions, playerPoints } from '../redux/actions';\nimport { requestQuestionsApi } from '../services/triviApi';\nimport './Questions.css';\nconst validation = 'correct-answer';\n\nclass Questions extends Component {\n  constructor(props) {\n    var _this;\n\n    super(props);\n    _this = this;\n\n    this.startTimer = () => {\n      const ONE_SECOND = 1000;\n      this.counter = setInterval(() => {\n        const {\n          timer\n        } = this.state;\n\n        if (timer > 0) {\n          this.setState({\n            timer: timer - 1\n          });\n        }\n\n        if (timer === 0) {\n          this.stopTimer();\n        }\n      }, ONE_SECOND);\n    };\n\n    this.stopTimer = () => {\n      this.setState({\n        resposta: true,\n        btnDisabled: true\n      });\n      clearInterval(this.counter);\n    };\n\n    this.getQuestions = async () => {\n      const {\n        token\n      } = this.props;\n      const apiResult = await requestQuestionsApi(token);\n      this.setState({\n        questions: apiResult.results,\n        haveOptions: true\n      });\n      const {\n        questions,\n        counter\n      } = this.state;\n      this.prepareAnswers(questions[counter].correct_answer, questions[counter].incorrect_answers);\n      this.setState({\n        questions: apiResult.results,\n        haveOptions: true\n      });\n    };\n\n    this.answerSelected = _ref => {\n      let {\n        target\n      } = _ref;\n      this.setState({\n        resposta: true\n      });\n\n      if (target.name === validation) {\n        this.playerScore();\n      }\n\n      this.stopTimer();\n    };\n\n    this.nextQuestion = () => {\n      const {\n        questions,\n        atualQuestion\n      } = this.state;\n      const {\n        history\n      } = this.props;\n\n      if (atualQuestion < questions.length - 1) {\n        this.setState(prevState => ({\n          atualQuestion: prevState.atualQuestion + 1,\n          counter: prevState.counter + 1,\n          resposta: false,\n          timer: 30,\n          btnDisabled: false\n        }), () => {\n          const {\n            counter\n          } = this.state;\n          this.prepareAnswers(questions[counter].correct_answer, questions[counter].incorrect_answers);\n        });\n        this.renderAnswers();\n        this.startTimer();\n      } else {\n        history.push('/feedback');\n      }\n    };\n\n    this.embaralhar = arr => {\n      // função do site: https://www.horadecodar.com.br/2021/05/10/como-embaralhar-um-array-em-javascript-shuffle/\n      for (let i = arr.length - 1; i > 0; i -= 1) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n      }\n\n      return arr;\n    };\n\n    this.prepareAnswers = function () {\n      let correct = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      let incorrects = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      const respostas = [...incorrects, correct];\n      const pronto = respostas.map((atual, index) => respostas.length - 1 === index ? {\n        resposta: atual,\n        certa: true,\n        classe: 'buttonGreen'\n      } : {\n        resposta: atual,\n        certa: false,\n        classe: 'buttonRed'\n      });\n\n      const embaralhado = _this.embaralhar(pronto);\n\n      _this.setState({\n        misturado: embaralhado\n      });\n    };\n\n    this.renderAnswers = () => {\n      const {\n        questions,\n        counter,\n        misturado,\n        resposta,\n        btnDisabled\n      } = this.state;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pag-questions\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        \"data-testid\": \"question-category\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 9\n        }\n      }, questions[counter].category), /*#__PURE__*/React.createElement(\"h3\", {\n        \"data-testid\": \"question-text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 9\n        }\n      }, questions[counter].question), /*#__PURE__*/React.createElement(\"section\", {\n        \"data-testid\": \"answer-options\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 9\n        }\n      }, misturado.map((item, index) => /*#__PURE__*/React.createElement(\"button\", {\n        key: index,\n        type: \"button\",\n        name: item.certa ? validation : `wrong-answer-${index}`,\n        \"data-testid\": item.certa ? validation : `wrong-answer-${index}`,\n        disabled: btnDisabled,\n        className: resposta ? item.classe : '',\n        onClick: e => this.answerSelected(e),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }\n      }, item.resposta))));\n    };\n\n    this.state = {\n      questions: ['a'],\n      atualQuestion: 0,\n      counter: 0,\n      resposta: false,\n      timer: 30,\n      btnDisabled: false,\n      misturado: [],\n      haveOptions: false\n    };\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n    this.startTimer();\n  }\n\n  playerScore() {\n    const {\n      questions,\n      counter,\n      timer\n    } = this.state;\n    const {\n      setPoints,\n      setAssertions\n    } = this.props;\n    let levelQuestion = 0;\n    const hard = 3;\n    const medium = 2;\n    const easy = 1;\n    const ten = 10;\n\n    if (questions[counter].difficulty === 'easy') {\n      levelQuestion = easy;\n    } else if (questions[counter].difficulty === 'medium') {\n      levelQuestion = medium;\n    } else {\n      levelQuestion = hard;\n    }\n\n    const mathPoint = ten + levelQuestion * timer;\n    setPoints(mathPoint);\n    setAssertions(1);\n  }\n\n  render() {\n    const {\n      resposta,\n      haveOptions,\n      timer\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"section\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 7\n      }\n    }, !haveOptions ? /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 14\n      }\n    }, \"Carregando\") : this.renderAnswers(), resposta && /*#__PURE__*/React.createElement(\"section\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"btn-next\",\n      onClick: this.nextQuestion,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 15\n      }\n    }, \"Next\")), /*#__PURE__*/React.createElement(\"section\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }\n    }, timer));\n  }\n\n}\n\nQuestions.propTypes = {\n  setToken: PropTypes.func,\n  token: PropTypes.string,\n  history: PropTypes.shape({\n    push: PropTypes.func\n  }).isRequired\n}.isRequired;\n\nconst mapStateToProps = state => ({\n  token: state.token\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setToken: payload => dispatch(getToken(payload)),\n  setPoints: payload => dispatch(playerPoints(payload)),\n  setAssertions: payload => dispatch(playerAssertions(payload))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);","map":{"version":3,"sources":["/home/brenotainan/projetos/ProjetoTrivia/src/components/Questions.js"],"names":["PropTypes","React","Component","connect","getToken","playerAssertions","playerPoints","requestQuestionsApi","validation","Questions","constructor","props","startTimer","ONE_SECOND","counter","setInterval","timer","state","setState","stopTimer","resposta","btnDisabled","clearInterval","getQuestions","token","apiResult","questions","results","haveOptions","prepareAnswers","correct_answer","incorrect_answers","answerSelected","target","name","playerScore","nextQuestion","atualQuestion","history","length","prevState","renderAnswers","push","embaralhar","arr","i","j","Math","floor","random","correct","incorrects","respostas","pronto","map","atual","index","certa","classe","embaralhado","misturado","category","question","item","e","componentDidMount","setPoints","setAssertions","levelQuestion","hard","medium","easy","ten","difficulty","mathPoint","render","propTypes","setToken","func","string","shape","isRequired","mapStateToProps","mapDispatchToProps","dispatch","payload"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getToken, playerAssertions, playerPoints } from '../redux/actions';\nimport { requestQuestionsApi } from '../services/triviApi';\nimport './Questions.css';\n\nconst validation = 'correct-answer';\n\nclass Questions extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      questions: ['a'],\n      atualQuestion: 0,\n      counter: 0,\n      resposta: false,\n      timer: 30,\n      btnDisabled: false,\n      misturado: [],\n      haveOptions: false,\n    };\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n    this.startTimer();\n  }\n\n  startTimer = () => {\n    const ONE_SECOND = 1000;\n    this.counter = setInterval(() => {\n      const { timer } = this.state;\n      if (timer > 0) {\n        this.setState({\n          timer: timer - 1,\n        });\n      }\n      if (timer === 0) {\n        this.stopTimer();\n      }\n    }, ONE_SECOND);\n  }\n\n  stopTimer = () => {\n    this.setState({ resposta: true, btnDisabled: true });\n    clearInterval(this.counter);\n  }\n\n  getQuestions = async () => {\n    const { token } = this.props;\n    const apiResult = await requestQuestionsApi(token);\n\n    this.setState({\n      questions: apiResult.results,\n      haveOptions: true,\n    });\n    const { questions, counter } = this.state;\n\n    this.prepareAnswers(questions[counter].correct_answer,\n      questions[counter].incorrect_answers);\n    this.setState({\n      questions: apiResult.results,\n      haveOptions: true,\n    });\n  }\n\n  answerSelected = ({ target }) => {\n    this.setState({\n      resposta: true,\n    });\n    if (target.name === validation) {\n      this.playerScore();\n    }\n    this.stopTimer();\n  }\n\n  nextQuestion = () => {\n    const { questions, atualQuestion } = this.state;\n    const { history } = this.props;\n    if (atualQuestion < (questions.length - 1)) {\n      this.setState((prevState) => ({\n        atualQuestion: prevState.atualQuestion + 1,\n        counter: prevState.counter + 1,\n        resposta: false,\n        timer: 30,\n        btnDisabled: false,\n      }), () => {\n        const { counter } = this.state;\n        this.prepareAnswers(questions[counter].correct_answer,\n          questions[counter].incorrect_answers);\n      });\n      this.renderAnswers();\n      this.startTimer();\n    } else {\n      history.push('/feedback');\n    }\n  }\n\n  embaralhar = (arr) => {\n    // função do site: https://www.horadecodar.com.br/2021/05/10/como-embaralhar-um-array-em-javascript-shuffle/\n    for (let i = arr.length - 1; i > 0; i -= 1) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n    return arr;\n  }\n\n  prepareAnswers = (correct = '', incorrects = []) => {\n    const respostas = [...incorrects, correct];\n\n    const pronto = respostas.map((atual, index) => (\n      ((respostas.length - 1) === index)\n        ? {\n          resposta: atual,\n          certa: true,\n          classe: 'buttonGreen',\n        }\n        : {\n          resposta: atual,\n          certa: false,\n          classe: 'buttonRed',\n        }\n    ));\n\n    const embaralhado = this.embaralhar(pronto);\n    this.setState({ misturado: embaralhado });\n  }\n\n  renderAnswers = () => {\n    const {\n      questions,\n      counter,\n      misturado,\n      resposta,\n      btnDisabled,\n    } = this.state;\n\n    return (\n      <div className=\"pag-questions\">\n        <h2 data-testid=\"question-category\">{questions[counter].category}</h2>\n        <h3 data-testid=\"question-text\">{questions[counter].question}</h3>\n        <section data-testid=\"answer-options\">\n          {misturado.map((item, index) => (\n            <button\n              key={ index }\n              type=\"button\"\n              name={\n                item.certa ? validation : `wrong-answer-${index}`\n              }\n              data-testid={\n                item.certa ? validation : `wrong-answer-${index}`\n              }\n              disabled={ btnDisabled }\n              className={ resposta ? item.classe : '' }\n              onClick={\n                (e) => this.answerSelected(e)\n              }\n            >\n              {item.resposta}\n            </button>\n          ))}\n        </section>\n      </div>\n    );\n  }\n\n  playerScore() {\n    const { questions, counter, timer } = this.state;\n    const { setPoints, setAssertions } = this.props;\n    let levelQuestion = 0;\n    const hard = 3;\n    const medium = 2;\n    const easy = 1;\n    const ten = 10;\n    if (questions[counter].difficulty === 'easy') {\n      levelQuestion = easy;\n    } else if (questions[counter].difficulty === 'medium') {\n      levelQuestion = medium;\n    } else {\n      levelQuestion = hard;\n    }\n    const mathPoint = ten + (levelQuestion * timer);\n\n    setPoints(mathPoint);\n    setAssertions(1);\n  }\n\n  render() {\n    const {\n      resposta,\n      haveOptions,\n      timer,\n    } = this.state;\n\n    return (\n      <section>\n        {!haveOptions\n          ? (<p>Carregando</p>)\n          : (this.renderAnswers())}\n        {resposta\n          && (\n            <section>\n              <button\n                type=\"button\"\n                data-testid=\"btn-next\"\n                onClick={ this.nextQuestion }\n              >\n                Next\n              </button>\n            </section>\n          )}\n\n        <section>\n          { timer }\n        </section>\n      </section>\n    );\n  }\n}\n\nQuestions.propTypes = {\n  setToken: PropTypes.func,\n  token: PropTypes.string,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  token: state.token,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setToken: (payload) => dispatch(getToken(payload)),\n  setPoints: (payload) => dispatch(playerPoints(payload)),\n  setAssertions: (payload) => dispatch(playerAssertions(payload)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);\n"]},"metadata":{},"sourceType":"module"}